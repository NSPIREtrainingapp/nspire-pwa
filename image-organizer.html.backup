<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NSPIRE Image Organizer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

            function handleDragLeave(e) {
            e.currentTarget.style.background = '';
        }

        function handlePreviewBoxDrop(e, previewBox) {
            if (!previewBox.querySelector('img')) {  // Only proceed if box is empty
                if (e.dataTransfer.items) {
                    // File drop from system
                    const items = Array.from(e.dataTransfer.items);
                    const imageItems = items.filter(item => item.kind === 'file' && item.type.startsWith('image/'));
                    
                    if (imageItems.length > 0) {
                        const file = imageItems[0].getAsFile();
                        const reader = new FileReader();
                        
                        reader.onload = (e) => {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.setAttribute('data-filename', file.name);
                            
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-btn';
                            removeBtn.innerHTML = '×';
                            removeBtn.onclick = function() {
                                previewBox.innerHTML = `Image ${previewBox.dataset.image}`;
                                processedImages.delete(file.name);
                            };

                            previewBox.innerHTML = '';
                            previewBox.appendChild(img);
                            previewBox.appendChild(removeBtn);
                            
                            const deficiencyItem = previewBox.closest('.deficiency-item');
                            const standardId = deficiencyItem.dataset.standard;
                            const defNumber = deficiencyItem.dataset.deficiency;
                            processedImages.set(file.name, `${standardId}_${defNumber}_${previewBox.dataset.image}`);
                        };
                        reader.readAsDataURL(file);
                    }
                } else {
                    // Internal drag from dropzone
                    const imgSrc = e.dataTransfer.getData('text/plain');
                    const filename = e.dataTransfer.getData('filename');
                    
                    if (imgSrc && filename) {
                        const img = document.createElement('img');
                        img.src = imgSrc;
                        img.setAttribute('data-filename', filename);
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-btn';
                        removeBtn.innerHTML = '×';
                        removeBtn.onclick = function() {
                            previewBox.innerHTML = `Image ${previewBox.dataset.image}`;
                            processedImages.delete(filename);
                        };

                        previewBox.innerHTML = '';
                        previewBox.appendChild(img);
                        previewBox.appendChild(removeBtn);
                        
                        const deficiencyItem = previewBox.closest('.deficiency-item');
                        const standardId = deficiencyItem.dataset.standard;
                        const defNumber = deficiencyItem.dataset.deficiency;
                        processedImages.set(filename, `${standardId}_${defNumber}_${previewBox.dataset.image}`);
                    }
                }
            }
        }

        function handleFiles(files) {ody {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            background: #f5f5f5;
            padding: 20px;
            line-height: 1.6;
            height: 100vh;
            margin: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            max-height: calc(100vh - 40px);
            overflow-y: auto;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo {
            max-height: 160px;
            width: auto;
            margin-bottom: 20px;
        }

        .dropzone {
            border: 3px dashed #ccc;
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            margin: 20px 0;
            background: #fafafa;
            transition: all 0.3s ease;
            position: sticky;
            top: 20px;
            z-index: 100;
        }

        .dropzone.dragover, .preview-box.dragover {
            background: #e3f2fd;
            border-color: #2196f3;
        }

        .standard-section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #eee;
            border-radius: 8px;
        }

        .standard-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #333;
        }

        .deficiency-container {
            margin-left: 20px;
        }

        .deficiency-item {
            margin: 10px 0;
            padding: 15px;
            background: #f8f8f8;
            border-radius: 4px;
        }

        .image-preview {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }

        .preview-box {
            width: 100px;
            height: 100px;
            border: 2px dashed #ddd;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .preview-box img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }

        .preview-box .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            cursor: pointer;
            display: none;
            z-index: 10;
        }

        .preview-box:hover .remove-btn {
            display: block;
        }

        .preview-box {
            cursor: pointer;
            background: #fff;
            transition: all 0.3s ease;
        }

        .progress {
            margin-top: 20px;
            padding: 10px;
            background: #e8f5e9;
            border-radius: 4px;
            text-align: center;
            color: #2e7d32;
        }

        .error {
            color: #d32f2f;
            background: #ffebee;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }

        button {
            background: #2196f3;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background: #1976d2;
        }

        .status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
        }

        .status.success {
            background: #e8f5e9;
            color: #2e7d32;
        }

        .status.error {
            background: #ffebee;
            color: #d32f2f;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <img src="logo.png" alt="NSPIRE Training App" class="logo">
            <h1>Image Organizer</h1>
            <p>Drag and drop images directly into the image boxes below</p>
        </div>

        <div id="progress" class="progress" style="display: none">
            Processing images...
        </div>

        <div id="standardsList"></div>
    </div>

    <script>
        let nspireData = [];
        let processedImages = new Map(); // To track which images have been assigned

        // Load the NSPIRE data
        fetch('nspire-data.json')
            .then(response => response.json())
            .then(data => {
                nspireData = data;
                displayStandards();
            })
            .catch(error => {
                console.error('Error loading NSPIRE data:', error);
                document.getElementById('standardsList').innerHTML = '<div class="error">Error loading standards data</div>';
            });

        function displayStandards() {
            const container = document.getElementById('standardsList');
            container.innerHTML = nspireData.map((standard, standardIndex) => {
                const standardId = standard.standard.toLowerCase().replace(/[^a-z0-9]/g, '_');
                
                const deficienciesHtml = (standard.deficiencies || []).map((def, defIndex) => {
                    const defNumber = defIndex + 1;
                    return `
                        <div class="deficiency-item" 
                             data-standard="${standardId}"
                             data-deficiency="${defNumber}"
                             ondragover="handleDragOver(event)"
                             ondrop="handleDrop(event)"
                             ondragleave="handleDragLeave(event)">
                            <div><strong>Deficiency ${defNumber}:</strong> ${def.criteria.split('\n')[0]}</div>
                            <div class="image-preview" id="${standardId}_${defNumber}_preview">
                                <div class="preview-box" data-image="1" ondragover="handleDragOver(event)" ondrop="handleDrop(event)" ondragleave="handleDragLeave(event)">Image 1</div>
                                <div class="preview-box" data-image="2" ondragover="handleDragOver(event)" ondrop="handleDrop(event)" ondragleave="handleDragLeave(event)">Image 2</div>
                                <div class="preview-box" data-image="3" ondragover="handleDragOver(event)" ondrop="handleDrop(event)" ondragleave="handleDragLeave(event)">Image 3</div>
                            </div>
                        </div>
                    `;
                }).join('');

                return `
                    <div class="standard-section">
                        <div class="standard-title">${standard.standard}</div>
                        <div class="deficiency-container">
                            ${deficienciesHtml}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Drag and drop handling
        const dropzone = document.getElementById('dropzone');
        
        dropzone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropzone.classList.add('dragover');
        });

        dropzone.addEventListener('dragleave', () => {
            dropzone.classList.remove('dragover');
        });

        dropzone.addEventListener('drop', handleInitialDrop);

        // File input handling
        document.getElementById('fileInput').addEventListener('change', (e) => {
            handleFiles(Array.from(e.target.files));
        });

        function handleInitialDrop(e) {
            e.preventDefault();
            dropzone.classList.remove('dragover');
            
            let files = [];
            if (e.dataTransfer.items) {
                files = Array.from(e.dataTransfer.items)
                    .filter(item => item.kind === 'file' && item.type.startsWith('image/'))
                    .map(item => item.getAsFile());
            } else {
                files = Array.from(e.dataTransfer.files)
                    .filter(file => file.type.startsWith('image/'));
            }

            handleFiles(files);
        }

        function handleFiles(files) {
            document.getElementById('progress').style.display = 'block';
            
            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.setAttribute('data-filename', file.name);
                    img.style.maxWidth = '100px';
                    img.style.maxHeight = '100px';
                    img.draggable = true;
                    img.addEventListener('dragstart', handleDragStart);
                    
                    dropzone.appendChild(img);
                };
                reader.readAsDataURL(file);
            });

            document.getElementById('progress').style.display = 'none';
        }

        function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', e.target.src);
            e.dataTransfer.setData('filename', e.target.getAttribute('data-filename'));
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.currentTarget.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            
            const box = e.currentTarget;
            if (!box.classList.contains('preview-box')) return;
            
            // Handle file drop
            if (e.dataTransfer.items) {
                const items = Array.from(e.dataTransfer.items);
                const imageItem = items.find(item => item.kind === 'file' && item.type.startsWith('image/'));
                
                if (imageItem) {
                    const file = imageItem.getAsFile();
                    const reader = new FileReader();
                    
                    reader.onload = (e) => {
                        addImageToBox(box, e.target.result, file.name);
                    };
                    reader.readAsDataURL(file);
                }
            }

            // Handle both file drops and internal image drops
            if (e.dataTransfer.items) {
                // File drop from system
                const items = Array.from(e.dataTransfer.items);
                const imageItems = items.filter(item => item.kind === 'file' && item.type.startsWith('image/'));
                
                if (imageItems.length > 0) {
                    const file = imageItems[0].getAsFile();
                    const reader = new FileReader();
                    
                    reader.onload = (e) => {
                        for (let box of previewBoxes) {
                            if (!box.querySelector('img')) {
                                const img = document.createElement('img');
                                img.src = e.target.result;
                                img.setAttribute('data-filename', file.name);
                                
                                const removeBtn = document.createElement('button');
                                removeBtn.className = 'remove-btn';
                                removeBtn.innerHTML = '×';
                                removeBtn.onclick = function() {
                                    box.innerHTML = `Image ${box.dataset.image}`;
                                    processedImages.delete(file.name);
                                };

                                box.innerHTML = '';
                                box.appendChild(img);
                                box.appendChild(removeBtn);
                                
                                processedImages.set(file.name, `${standardId}_${defNumber}_${box.dataset.image}`);
                                break;
                            }
                        }
                    };
                    reader.readAsDataURL(file);
                }
            } else {
                // Internal drag from dropzone
                const imgSrc = e.dataTransfer.getData('text/plain');
                const filename = e.dataTransfer.getData('filename');
                
                if (imgSrc && filename) {
                    for (let box of previewBoxes) {
                        if (!box.querySelector('img')) {
                            const img = document.createElement('img');
                            img.src = imgSrc;
                            img.setAttribute('data-filename', filename);
                            
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-btn';
                            removeBtn.innerHTML = '×';
                            removeBtn.onclick = function() {
                                box.innerHTML = `Image ${box.dataset.image}`;
                                processedImages.delete(filename);
                            };

                            box.innerHTML = '';
                            box.appendChild(img);
                            box.appendChild(removeBtn);
                            
                            processedImages.set(filename, `${standardId}_${defNumber}_${box.dataset.image}`);
                            break;
                        }
                    }
                }
            }
        }
    </script>
</body>
</html>
